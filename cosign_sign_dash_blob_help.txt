Sign the supplied blob, outputting the base64-encoded signature to stdout.

Usage:
cosign sign-blob [flags]

Examples:
  cosign sign-blob --key <key path>|<kms uri> <blob>

  # sign a blob with Google sign-in (experimental)
  cosign sign-blob <FILE> --output-signature <FILE> --output-certificate <FILE>

  # sign a blob with a local key pair file
  cosign sign-blob --key cosign.key <FILE>

  # sign a blob with a key stored in an environment variable
  cosign sign-blob --key env://[ENV_VAR] <FILE>

  # sign a blob with a key pair stored in Azure Key Vault
  cosign sign-blob --key azurekms://[VAULT_NAME][VAULT_URI]/[KEY] <FILE>

  # sign a blob with a key pair stored in AWS KMS
  cosign sign-blob --key awskms://[ENDPOINT]/[ID/ALIAS/ARN] <FILE>

  # sign a blob with a key pair stored in Google Cloud KMS
  cosign sign-blob --key gcpkms://projects/[PROJECT]/locations/global/keyRings/[KEYRING]/cryptoKeys/[KEY] <FILE>

  # sign a blob with a key pair stored in Hashicorp Vault
  cosign sign-blob --key hashivault://[KEY] <FILE>

Flags:
    --b64=true:
	whether to base64 encode the output

    --bundle='':
	write everything required to verify the blob to a FILE

    --fulcio-auth-flow='':
	fulcio interactive oauth2 flow to use for certificate from fulcio. Defaults to determining the flow based on the runtime environment. (options) normal|device|token|client_credentials

    --fulcio-url='https://fulcio.sigstore.dev':
	address of sigstore PKI server

    -h, --help=false:
	help for sign-blob

    --identity-token='':
	identity token to use for certificate from fulcio. the token or a path to a file containing the token is accepted.

    --insecure-skip-verify=false:
	skip verifying fulcio published to the SCT (this should only be used for testing).

    --issue-certificate=false:
	issue a code signing certificate from Fulcio, even if a key is provided

    --key='':
	path to the private key file, KMS URI or Kubernetes Secret

    --new-bundle-format=false:
	output bundle in new format that contains all verification material

    --oidc-client-id='sigstore':
	OIDC client ID for application

    --oidc-client-secret-file='':
	Path to file containing OIDC client secret for application

    --oidc-disable-ambient-providers=false:
	Disable ambient OIDC providers. When true, ambient credentials will not be read

    --oidc-issuer='https://oauth2.sigstore.dev/auth':
	OIDC provider to be used to issue ID token

    --oidc-provider='':
	Specify the provider to get the OIDC token from (Optional). If unset, all options will be tried. Options include: [spiffe, google, github-actions, filesystem, buildkite-agent]

    --oidc-redirect-url='':
	OIDC redirect URL (Optional). The default oidc-redirect-url is 'http://localhost:0/auth/callback'.


'''
 todo: look here:
        --output='':
	    write the signature to FILE
        --output-certificate='':
        write the certificate to FILE
        --output-signature='':
        write the signature to FILE

'''

    --rekor-url='https://rekor.sigstore.dev':
	address of rekor STL server

    --rfc3161-timestamp='':
	write the RFC3161 timestamp to a file

    --sk=false:
	whether to use a hardware security key

    --slot='':
	security key slot to use for generated key (default: signature) (authentication|signature|card-authentication|key-management)

    --timestamp-client-cacert='':
	path to the X.509 CA certificate file in PEM format to be used for the connection to the TSA Server

    --timestamp-client-cert='':
	path to the X.509 certificate file in PEM format to be used for the connection to the TSA Server

    --timestamp-client-key='':
	path to the X.509 private key file in PEM format to be used, together with the 'timestamp-client-cert' value, for the connection to the TSA Server

    --timestamp-server-name='':
	SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the TSA Server

    --timestamp-server-url='':
	url to the Timestamp RFC3161 server, default none. Must be the path to the API to request timestamp responses, e.g. https://freetsa.org/tsr

    --tlog-upload=true:
	whether or not to upload to the tlog

    -y, --yes=false:
	skip confirmation prompts for non-destructive operations

Global Flags:
      --output-file string   log output to a file
  -t, --timeout duration     timeout for commands (default 3m0s)
  -d, --verbose              log debug output
